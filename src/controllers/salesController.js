const Sales = require("../models/salesModel");

// Calculate and return the total revenue generated by all sales transactions
exports.TotalRevenue = async (req, res) => {
    try {
        const totalRevenue = await Sales.aggregate([
            {
                $group: {
                    _id: null,
                    totalRevenue: { $sum: { $multiply: ["$quantity", "$price"] } }
                }
            }
        ]);

        data = totalRevenue[0].totalRevenue

        res.status(200).json({
            status: "Success",
            data: `total revenue generated by all sales transactions is ${data}$`
        });
    } catch (error) {
        res.status(404).json({
            status: "Fail",
            data: error.toString()
        });
    }
};

// Find and return the total quantity sold for each product
exports.QuantityByProduct = async (req, res) => {
    try {
        const quantityByProduct = await Sales.aggregate([
            {
                $group: {
                    _id: "$product",
                    totalQuantity: { $sum: "$quantity" }
                }
            }
        ]);

        res.status(200).json({
            status: "Success",
            data: quantityByProduct
        });
    } catch (error) {
        res.status(404).json({
            status: "Fail",
            data: error.toString()
        });
    }
};

// Retrieve the top 5 products with the highest total revenue, along with their total revenue values
exports.TopProducts = async (req, res) => {
    try {
        const topProducts = await Sales.aggregate([
            {
                $group: {
                    _id: "$product",
                    totalRevenue: { $sum: { $multiply: ["$quantity", "$price"] } }
                }
            },
            { $sort: { totalRevenue: -1 } },
            { $limit: 5 }
        ]);

        res.status(200).json({
            status: "Success",
            data: topProducts
        });
    } catch (error) {
        res.status(404).json({
            status: "Fail",
            data: error.toString()
        });
    }
};

// Calculate and return the average price of products sold
exports.AveragePrice = async (req, res) => {
    try {
        const averagePrice = await Sales.aggregate([
            {
                $group: {
                    _id: null,
                    averagePrice: { $avg: "$price" }
                }
            }
        ]);

        data = averagePrice[0].averagePrice

        res.status(200).json({
            status: "Success",
            data: `Average price of products sold is ${data}$`
        });
    } catch (error) {
        res.status(404).json({
            status: "Fail",
            data: error.toString()
        });
    }
};

// Group the sales data by month and year and calculate the total revenue for each month-year combination
exports.RevenueByMonth = async (req, res) => {
    try {
        const revenueByMonth = await Sales.aggregate([
            {
                $addFields: {
                    parsedDate: {
                        $toDate: "$date"
                    }
                }
            },
            {
                $group: {
                    _id: {
                        month: { $month: "$parsedDate" },
                        year: { $year: "$parsedDate" }
                    },
                    totalRevenue: { $sum: { $multiply: ["$quantity", "$price"] } }
                }
            },
            {
                $project: {
                    _id: 0,
                    month: "$_id.month",
                    year: "$_id.year",
                    totalRevenue: 1
                }
            }
        ]);

        res.status(200).json({
            status: "Success",
            data: revenueByMonth
        });
    } catch (error) {
        res.status(500).json({
            status: "Fail",
            data: error.toString()
        });
    }
};

// Find and return the product that had the highest quantity sold on a single day
exports.HighestQuantitySold = async (req, res) => {
    try {
        const highestQuantitySold = await Sales.findOne().sort({ quantity: -1 });

        res.status(200).json({
            status: "Success",
            data: highestQuantitySold
        });
    } catch (error) {
        res.status(404).json({
            status: "Fail",
            data: error.toString()
        });
    }
};

// Calculate and return the total salary expense for each department (using a constant value)
exports.DepartmentSalaryExpense = async (req, res) => {
    try {
        const fixedDepartmentValue = "No Department";

        const departmentSalaryExpense = await Sales.aggregate([
            {
                $group: {
                    _id: { department: { $literal: fixedDepartmentValue } },
                    totalSalaryExpense: { $sum: { $multiply: ["$quantity", "$price"] } }
                }
            }
        ]);

        res.status(200).json({
            status: "Success",
            data: departmentSalaryExpense
        });
    } catch (error) {
        res.status(500).json({
            status: "Fail",
            data: error.toString()
        });
    }
};
